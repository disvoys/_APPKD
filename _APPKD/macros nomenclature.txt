Public oDraw                    As DrawingDocument
Public DrwRoot                  As DrawingRoot
Public oSheets                  As DrawingSheets
Public oSheet                   As DrawingSheet
Public oViews                   As DrawingViews
Public oBGView                  As DrawingView
Public oView                    As DrawingView
Public oGeomElems               As GeometricElements
Public oGeomElem                As GeometricElement
Public oFact2D                  As Factory2D
Public oTexts                   As DrawingTexts
Public oText                    As DrawingText                  'variable de travail
Public oText1                   As DrawingText                  'variable de travail
Public oSel                     As Selection
Public sheetProjMethod          As CatSheetProjectionMethod
Public orientationSheet         As CatPaperOrientation
Public documentStd              As CatDrawingStandard
Public sheetFormat              As CatPaperSize
Public oVisProp                 As VisPropertySet               'propriété graphique d'un élément selectionné
Public DictionnaireData                                         'Dictionnaire de données. Il sert aux fonctions de remplissage automatique du fichier. (par importation PINUP ou par importation par fichier)
Public OH                       As Double                       'origine horizontale
Public OV                       As Double                       'origine Verticale
Public OHUP                     As Double                       'origine de travail  horizontale
Public OVUP                     As Double                       'origine de travail  Verticale
Public Height                   As Double                       'Hauteur feuille
Public Width                    As Double                       'Largeur feuille
Public Col(15)                  As Double                       'Coordonnées des colonnes
Public Row(11)                  As Double                       'Coordonnées des rangées
Public Offset                   As Double                       'Distance entre les bords de la feuille et le cadre (marge)
Public iNbOfGeomElems           As Integer                      'nombre d'élément de géométrie
Public iNBTexts                 As Integer                      'nombre de texte
Public iNBLigne                 As Integer                      'Nombre de ligne dans le tableau
Public Booltemoin               As Boolean
Public iItem                    As Integer                      'Compteur servant a la création du " DictionnaireData ", il marque le numéro d'item de chaque texte

Public Const mm = 1
Const MacroID = "BEOutillages_Cartouche_DA"

Option Explicit
'*********************************************************************
'* Macro : Insertion Sous Ensemble
'*
'* Fonctions :  Insere un sous ensemble dans le product sélectionné
'*
'* Versions : voir GiltLAB
'**********************************************************************
Sub CATMain()
'Log de l'utilisation de la macro
LogUtilMacro nPath, nFicLog, nMacro, "F_Nomenclature2D", VMacro
'Dim oProdDoc As ProductDocument
Dim oProdDoc As Document
Dim oProd As Product
Dim oFirstView As DrawingView
Dim sFullLien As String
Dim cLigNoms As c_LNomencls

    'Check l'environnement
    Check_Env ("Drawing")
    PathMacro = Get_Active_CATVBA_Path
    
'Configure les champs en fonction de la langue
    Init_Language
'Initialisation des variables
    CATInit
      
'Charge la liste des attributs
    GetPubAttributs PathMacro & attribFile

'Recherche le lien de la vue principale
    Set oFirstView = oViews.Item(3) 'affecte la "vue de Face" à oFirstView
    sFullLien = LienVue(oFirstView)
    'Ouverture du document du lien
    Set oProdDoc = oDocs.Open(sFullLien)
    Set oProd = oProdDoc.Product
    Set oProd = oProd.ReferenceProduct
    
    If isDetail(sFullLien) Then
        Set cLigNoms = getBomDet(oProd)
    Else
        'Extraction de la nomenclature du product et sauvegarde dans un fichier texte
        GenBomCatia oProdDoc, TypFicNom.CatXls
        'Copie de la nomenclature de c:\temp vers le dossier d'affaire
        CopyFile pathdestNom, oProdDoc.Path, oProd.Name & nExtNomCatia & ".xls"
        'Fermeture du produit lié
        'oProdDoc.Close
        Set cLigNoms = GetBomAssembly(pathdestNom & oProd.Name & nExtNomCatia & ".xls", oProd.Name)
        'Set cLigNoms = GetBomAssembly("c:\temp\MA62599Z00-F46C5747_050200-BomCatia.XLS")
    End If
    
    oDraw.Activate
    DrawBom cLigNoms.Count
    FillBom cLigNoms
    
    oDraw.Activate
    
End Sub

Public Sub DrawBom(nbLigne)
'trace la nomenclature
Dim oldNbLig As Integer

    'calcule le nombre de lignes déjà présentes
    iNBLigne = nbLigne
    oldNbLig = CATCompteNBLigne
    
    If iNBLigne > oldNbLig Then
        CATDrw_Ajouter_lignes oldNbLig
        
    ElseIf iNBLigne < oldNbLig Then
        CATDrw_Supprimer_lignes oldNbLig
        DeleteTextsNom
    
    End If

End Sub

Sub FillBom(cLigNoms)
  Dim cpt As Long
  Dim ii As Long
  iNBLigne = cLigNoms.Count
  iNBTexts = oTexts.Count                                           'On compte le nombre de textes
  For cpt = 1 To iNBLigne
      For ii = 1 To iNBTexts
        Set oText = oTexts.Item(ii)
        Select Case oText.Name                                           'celon le nom dutexte
          Case "TitleBlock_Text_Tableau_1_" + CStr(cpt - 1)               'Le nom est reconstitué à partir de la racine commune du type d'élément à supprimer puis du numéro de ligne qui permet de ne sélectionner qu'un seul élément.
            oText.Text = cLigNoms.Item(cpt).rep
          Case "TitleBlock_Data_Tableau_1_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).Planche
          Case "TitleBlock_Data_Tableau_2_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).qte
          Case "TitleBlock_Data_Tableau_3_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).Design
          Case "TitleBlock_Data_Tableau_4_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).Matiere
          Case "TitleBlock_Data_Tableau_5_" + CStr(cpt - 1)
            oText.Text = ""
          Case "TitleBlock_Data_Tableau_6_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).DimBrut
          Case "TitleBlock_Data_Tableau_7_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).Traitement
          Case "TitleBlock_Data_Tableau_8_" + CStr(cpt - 1)
            oText.Text = cLigNoms.Item(cpt).Ref
        End Select
      Next
  Next

End Sub

Public Function GetBomAssembly(nFic As String, nSSe As String) As c_LNomencls
'Collecte les info du fichier de moneclature généré par Catia
Dim objExcel
Dim objWorkBook
   
'Rep
'PLanche
'Qte
'Description
'NomPuls_Matière
'vide
'NomPuls_Dim_Brutes
'NomPuls_Traitement
'Nomenclature
   
    Set objExcel = CreateObject("EXCEL.APPLICATION")
    Set objWorkBook = objExcel.Workbooks.Open(nFic)
    objExcel.Visible = True

    Set GetBomAssembly = GetListeComp(objWorkBook, nSSe, 1)
    objWorkBook.Close
    
End Function
       
Public Function GetListeComp(objWorkBook, nSSe As String, rep As Integer) As c_LNomencls
'Collecte la liste des composant d'un sous ensemble
Dim cLignom As c_LNomencl
Dim cLigNoms As New c_LNomencls
Dim cLigNomsTemp As New c_LNomencls
Dim i As Long
Dim qte As Integer

    For i = NoPremiereLigSSE(objWorkBook, nSSe) To NoDerniereLigneSSE(objWorkBook, nSSe)
        If EstGroup(objWorkBook.ActiveSheet.cells(i, 1)) Then
            Set cLigNomsTemp = GetListeComp(objWorkBook, objWorkBook.ActiveSheet.cells(i, 1), rep)
            'mémorise la qTe su SSE
            qte = objWorkBook.ActiveSheet.cells(i, 3)
            For Each cLignom In cLigNomsTemp.Items
                cLigNoms.Add cLignom.rep, cLignom.Planche, cLignom.qte * qte, cLignom.Design, cLignom.Matiere, cLignom.Etat, cLignom.DimBrut, cLignom.Traitement, cLignom.Ref
            Next
        Else
            Set cLignom = New c_LNomencl
            cLignom.rep = FormatRep(rep)
            cLignom.Planche = objWorkBook.ActiveSheet.cells(i, 2)
            cLignom.qte = CInt(objWorkBook.ActiveSheet.cells(i, 3))
            If objWorkBook.ActiveSheet.cells(i, 4) <> "_" Then
                cLignom.Design = objWorkBook.ActiveSheet.cells(i, 4)
            Else
                cLignom.Design = objWorkBook.ActiveSheet.cells(i, 1)
            End If
            cLignom.Matiere = objWorkBook.ActiveSheet.cells(i, 5)
            cLignom.Etat = ""
            cLignom.DimBrut = objWorkBook.ActiveSheet.cells(i, 6)
            cLignom.Traitement = objWorkBook.ActiveSheet.cells(i, 7)
            cLignom.Ref = objWorkBook.ActiveSheet.cells(i, 8)
            cLigNoms.Add cLignom.rep, cLignom.Planche, cLignom.qte, cLignom.Design, cLignom.Matiere, cLignom.Etat, cLignom.DimBrut, cLignom.Traitement, cLignom.Ref
            rep = rep + 1
        End If
    Next i
    Set GetListeComp = cLigNoms
End Function
       
Public Function getBomDet(oProd) As c_LNomencls
'Collecte les info de nomenclature du part
Dim cLignom As New c_LNomencl
Dim cLigNoms As New c_LNomencls
Dim oParams As Parameters
    Set oParams = oProd.ReferenceProduct.UserRefProperties
    cLignom.Design = TestParamExist(oParams, nPrmDesign)
    cLignom.DimBrut = TestParamExist(oParams, nPrmDim)
    cLignom.Etat = "+"
    cLignom.Matiere = TestParamExist(oParams, nPrmMat)
    cLignom.Planche = "+"
    cLignom.qte = 1
    cLignom.Ref = oProd.Nomenclature
    cLignom.rep = "+"
    cLignom.Traitement = TestParamExist(oParams, nPrmTrait)
    cLigNoms.Add cLignom.rep, cLignom.Planche, cLignom.qte, cLignom.Design, cLignom.Matiere, cLignom.Etat, cLignom.DimBrut, cLignom.Traitement, cLignom.Ref
    Set getBomDet = cLigNoms
End Function
           
Public Function EstGroup(nom As String) As Boolean
'Détecte si c'est un groupe de composants
'Les groupes sont nommés "Grp_xxxx"
    If InStr(1, nom, "Grp_") Then EstGroup = True Else EstGroup = False
End Function

Public Function FormatRep(rep As Integer) As String
'Format le N° de repère
    FormatRep = CStr(rep)
    If Len(FormatRep) < 2 Then FormatRep = "0" & FormatRep

End Function
 
Public Sub CATInit()
Dim fso, foldTemp
'Creation des objets principaux
    Set oDocs = CATIA.Documents
    Set oDraw = CATIA.ActiveDocument
    Set DrwRoot = oDraw.DrawingRoot
    Set oSheets = DrwRoot.Sheets
    Set oSel = oDraw.Selection
    Set oSheet = oSheets.ActiveSheet                      'Défini la drawingsheet
    Set oViews = oSheet.Views
    Set oBGView = oViews.Item("Background View")
    Set oView = oViews.ActiveView
    Set oTexts = oBGView.Texts                              'Défini la collection de textes
    Set oFact2D = oBGView.Factory2D                         'Défini l'ensemble d'objet 2D
    
    Set oGeomElems = oBGView.GeometricElements                 'Défini la collection d'élément géométrique
    sheetProjMethod = oSheet.ProjectionMethod
    orientationSheet = oSheet.Orientation
    documentStd = DrwRoot.Standard
    Height = oSheet.GetPaperHeight                          'stock la hauteur de la feuille
    Width = oSheet.GetPaperWidth                            'stock la largeur de la feuille
    sheetFormat = oSheet.PaperSize                          'stock le format de la feuille
    CATStandard

  Set DictionnaireData = CreateObject("Scripting.Dictionary")
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set foldTemp = fso.GetSpecialFolder(2)
  iItem = 0

'definition du tableau de reference, tout les éléments du cartouche (Texte et ligne géométrique) sont indexés sur ces valeur.
'Les colonnes
Col(1) = -285 * mm
Col(2) = -273 * mm
Col(3) = -248 * mm
Col(4) = -236 * mm
Col(5) = -170 * mm
Col(6) = -155 * mm
Col(7) = -141 * mm
Col(8) = -111 * mm
Col(9) = -102 * mm
Col(10) = -95 * mm
Col(11) = -72 * mm
Col(12) = -65 * mm
Col(13) = -37 * mm
Col(14) = -35 * mm
Col(15) = -6 * mm
' Les lignes
Row(1) = 9 * mm
Row(2) = 10 * mm
Row(3) = 18 * mm
Row(4) = 37 * mm
Row(5) = 56 * mm
Row(6) = 70 * mm
Row(7) = 84 * mm
Row(8) = 98 * mm
Row(9) = 105 * mm
Row(10) = 112 * mm
Row(11) = 118 * mm
  
End Sub
    
Public Sub CATStandard()
  '-------------------------------------------------------------------------------
  'Calcul de la marge et de l’origine
  '-------------------------------------------------------------------------------
  If sheetFormat = catPaperA3 And orientationSheet <> catPaperLandscape Then
    Offset = 6# * mm 'marge =5.
    'calcul de l'origine du cartouche
    OH = Width - Offset
    OV = Offset
  Else
    Offset = 10# * mm 'marge = 10.
    'calcul de l'origine du cartouche
    OH = Width - Offset
    OV = Offset
  End If

End Sub
    
Public Sub CATDrw_Supprimer_lignes(iNbLigExist)
'Suppression de lignes après la création du cartouche
Dim cpt       As Integer          'Compteur quelconque (pour multiple usage)
Dim strLignes As String           'Variable contenant le mot " ligne " au pluriel ou au singulier
Dim ii As Long
    
    iNbOfGeomElems = oGeomElems.Count                                    'On compte le nombre d'éléments géométriques.
    iNBTexts = oTexts.Count                                           'On compte le nombre de textes
    For cpt = iNbLigExist To iNBLigne Step -1   'cpt corespond ici au numréro de la ligne a supprimer. le pas de " -1 " permet de selectionné les éléemnt en partant de la ligne du haut.
      For ii = 1 To iNbOfGeomElems
        Set oGeomElem = oGeomElems.Item(ii)
        Select Case oGeomElem.Name                                       'selon le nom de l'élément géométrique
          Case "TitleBlock_Line_Row_Tableau_1" + CStr(cpt)              'Le nom est reconstitué à partir de la racine commune du type d'élément à supprimer puis du numéro de ligne qui permet de ne sélectionner qu'un seul élément.
            oSel.Add oGeomElem                                   'on ajoute l'élément a la selection
          Case "TitleBlock_Line_Col_Tableau_1" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_2" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_3" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_4" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_5" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_6" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_7" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_8" + CStr(cpt)
            oSel.Add oGeomElem
          Case "TitleBlock_Line_Col_Tableau_9" + CStr(cpt)
            oSel.Add oGeomElem
        End Select
      Next
      For ii = 1 To iNBTexts
        On Error Resume Next
        Set oText = oTexts.Item(ii)
        Select Case oText.Name                                           'selon le nom dutexte
          Case "TitleBlock_Text_Tableau_1_" + CStr(cpt)                 'Le nom est reconstitué à partir de la racine commune du type d'élément à supprimer puis du numéro de ligne qui permet de ne sélectionner qu'un seul élément.
            oSel.Add oText                                        'on ajoute l'élément a la selection
          Case "TitleBlock_Data_Tableau_1_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_2_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_3_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_4_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_5_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_6_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_7_" + CStr(cpt)
            oSel.Add oText
          Case "TitleBlock_Data_Tableau_8_" + CStr(cpt)
            oSel.Add oText
        End Select
        On Error GoTo 0
      Next
    Next
    oSel.Delete                                                    'Suppression du contenue de la sélection
    oSel.Clear                                                     'Désélection

End Sub
    
Sub CATDrw_Ajouter_lignes(iNbLigExist As Integer)
  '-------------------------------------------------------------------------------
  'Permet l'ajout de lignes après la création du cartouche, il s'agit d'une fonction utile en mode interactif.
  '-------------------------------------------------------------------------------
  Dim MaxNBLigne    As Integer      'Variable contenant le nombre maximum de ligne que le document peut contenir.
  Dim i As Long
  
  'CATInit                           'Initialisation du programme.
  If CATCheckRef(0) Then Exit Sub   'Vérification de l'existence du cartouche BEO.
  CATStandard                       'Calcul des marges du document
  
  iNBLigne = iNBLigne - iNbLigExist     'Calcul du nombre total de lignes (celle existante - celle à rajouter
  For i = 1 To iNBTexts                     'Recherche du texte d'orientation du cartouche (Position bas droite ou haut droite)
    Set oText = oTexts.Item(i)             'Affecte en mémoire un élément de la collection de texte " otexts "
    Select Case oText.Name                   'Le repérage se fait en fonction du nom de texte
    Case "Up"                               'Cas supérieur droit
      OHUP = Height - Offset                'Calcul de la composante horizontale de l'origine de travail " up ".
      OVUP = Width - Offset                 'Calcul de la composante vertical de l'origine de travail " up ".
      CATTitleBlockTableauUP (iNbLigExist)      'Appel de la procédure (UP) de création des lignes le paramètre indique le nombre de ligne déjà créer, il faut donc créer de nouvelle ligne a la suite et non superposé.
      CATTitleBlockTableauTexteUP (iNbLigExist) 'Appel de la procédure (UP) de création des texte dans les nouvel lignes. Le paramètre est le même que pour la ligne précédente, et son utilité est la même aussi
      Exit For
    Case "Bottom"                                   'Cas inférieur droit
      CATTitleBlockTableau (iNbLigExist)        'Appel de la procédure de création des lignes le paramètre indique le nombre de ligne déjà créer, il faut donc créer de nouvelle ligne a la suite et non superposé.
      CATTitleBlockTableauTexte (iNbLigExist)   'Appel de la procédure de création des texte dans les nouvel lignes. Le paramètre est le même que pour la ligne précédente, et son utilité est la même aussi
      Exit For
    End Select
  Next
  

End Sub


Sub CATTitleBlockTableauUP(premiereligne)
  Dim InterligneTableau 'As Double
  Dim cpt               'As Integer
  Dim oLine As Line2D

    oBGView.Activate
  InterligneTableau = 6
  For cpt = premiereligne To premiereligne + iNBLigne - 1
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(1), OVUP - Row(11) - (InterligneTableau * cpt), OHUP)
    oSel.Add (oLine)
    oLine.Name = "TitleBlock_Line_Row_Tableau_1" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(1), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(1))
    oLine.Name = "TitleBlock_Line_Col_Tableau_1" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(2), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(2))
    oLine.Name = "TitleBlock_Line_Col_Tableau_2" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(3), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(3))
    oLine.Name = "TitleBlock_Line_Col_Tableau_3" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(4), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(4))
    oLine.Name = "TitleBlock_Line_Col_Tableau_4" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(7), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(7))
    oLine.Name = "TitleBlock_Line_Col_Tableau_5" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(8), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(8))
    oLine.Name = "TitleBlock_Line_Col_Tableau_6" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(10), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(10))
    oLine.Name = "TitleBlock_Line_Col_Tableau_7" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(12), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(12))
    oLine.Name = "TitleBlock_Line_Col_Tableau_8" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OVUP - Row(11) - (InterligneTableau * cpt), OHUP + Col(14), OVUP - Row(11) - (InterligneTableau * (cpt + 1)), OHUP + Col(14))
    oLine.Name = "TitleBlock_Line_Col_Tableau_9" + CStr(cpt)
  Next
  
  Set oVisProp = oSel.VisProperties
  oVisProp.SetRealWidth 0.5, 1
  oSel.Clear

    oView.Activate
End Sub

Public Sub CATTitleBlockTableau(premiereligne As Integer)
  Dim InterligneTableau 'As Double
  Dim cpt               'As Integer
  Dim oLine As Line2D
  
  oBGView.Activate
  InterligneTableau = 6
  For cpt = premiereligne To premiereligne + iNBLigne - 1
    Set oLine = oFact2D.CreateLine(OH + Col(1), OV + Row(11) + (InterligneTableau * cpt), OH, OV + Row(11) + (InterligneTableau * cpt))
    oSel.Add oLine
    oLine.Name = "TitleBlock_Line_Row_Tableau_1" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(1), OV + Row(11) + (InterligneTableau * cpt), OH + Col(1), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_1" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(2), OV + Row(11) + (InterligneTableau * cpt), OH + Col(2), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_2" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(3), OV + Row(11) + (InterligneTableau * cpt), OH + Col(3), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_3" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(4), OV + Row(11) + (InterligneTableau * cpt), OH + Col(4), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_4" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(7), OV + Row(11) + (InterligneTableau * cpt), OH + Col(7), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_5" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(8), OV + Row(11) + (InterligneTableau * cpt), OH + Col(8), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_6" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(10), OV + Row(11) + (InterligneTableau * cpt), OH + Col(10), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_7" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(12), OV + Row(11) + (InterligneTableau * cpt), OH + Col(12), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_8" + CStr(cpt)
    Set oLine = oFact2D.CreateLine(OH + Col(14), OV + Row(11) + (InterligneTableau * cpt), OH + Col(14), OV + Row(11) + (InterligneTableau * (cpt + 1)))
    oLine.Name = "TitleBlock_Line_Col_Tableau_9" + CStr(cpt)
  Next
  
  Set oVisProp = oSel.VisProperties
  oVisProp.SetRealWidth 0.5, 1
  oSel.Clear
    oView.Activate
End Sub

Sub CATTitleBlockTableauTexteUP(premiereligne)
Dim cpt As Long
  Dim InterligneTableau 'As Double
  InterligneTableau = 6
  For cpt = premiereligne To premiereligne + iNBLigne - 1
    If cpt < 9 Then
      Set oText = oTexts.Add("0" + CStr(cpt + 1), OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(1) + 6)
      oText.Angle = 90
      oText.SetParameterOnSubString catBold, 0, 0, 1
      oText.SetParameterOnSubString catItalic, 0, 0, 1
      CATFormatTBText "TitleBlock_Text_Tableau_1_" + CStr(cpt), catMiddleCenter, 2.5
      CATClassementTexte
    Else
      Set oText = oTexts.Add(CStr(cpt + 1), OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(1) + 6)
      oText.Angle = 90
      oText.SetParameterOnSubString catBold, 0, 0, 1
      oText.SetParameterOnSubString catItalic, 0, 0, 1
      CATFormatTBText "TitleBlock_Text_Tableau_1_" + CStr(cpt), catMiddleCenter, 2.5
      CATClassementTexte
    End If
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(2) + 12.5)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 25, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_1_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(3) + 6)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 12, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_2_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
'   Set oText = otexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + ((Col(4) + Col(7)) / 2))
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(4) + 2)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 93, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_3_" + CStr(cpt), catMiddleLeft, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(7) + 15)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_4_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(8) + 8)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 16, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_5_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(10) + 15)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_6_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(12) + 15)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_7_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OVUP - Row(11) - (InterligneTableau * cpt) - 2.5, OHUP + Col(14) + 17.5)
    oText.Angle = 90
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 35, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_8_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
  Next

End Sub


Sub CATTitleBlockTableauTexte(premiereligne)
  Dim InterligneTableau 'As Double
  Dim cpt As Long
  
  InterligneTableau = 6
  For cpt = premiereligne To premiereligne + iNBLigne - 1
    If cpt < 9 Then
      Set oText = oTexts.Add("0" + CStr(cpt + 1), OH + Col(1) + 6, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
      oText.SetParameterOnSubString catBold, 0, 0, 1
      oText.SetParameterOnSubString catItalic, 0, 0, 1
    'Modif ci-dessous taille 4
      CATFormatTBText "TitleBlock_Text_Tableau_1_" + CStr(cpt), catMiddleCenter, 4
      CATClassementTexte
    Else
      Set oText = oTexts.Add(CStr(cpt + 1), OH + Col(1) + 6, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
      oText.SetParameterOnSubString catBold, 0, 0, 1
      oText.SetParameterOnSubString catItalic, 0, 0, 1
    'Modif ci-dessous taille 4
      CATFormatTBText "TitleBlock_Text_Tableau_1_" + CStr(cpt), catMiddleCenter, 4
      CATClassementTexte
    End If
    Set oText = oTexts.Add("+", OH + Col(2) + 12.5, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 25, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_1_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(3) + 6, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 12, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_2_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(4) + 2, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 93, catLeft
    CATFormatTBText "TitleBlock_Data_Tableau_3_" + CStr(cpt), catMiddleLeft, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(7) + 15, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_4_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(8) + 8, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 16, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_5_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(10) + 15, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_6_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(12) + 15, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 30, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_7_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
    Set oText = oTexts.Add("+", OH + Col(14) + 17.5, OV + Row(11) + (InterligneTableau * cpt) + 2.5)
    oText.SetParameterOnSubString catItalic, 0, 0, 1
  CATFormatTBDTText 35, catCenter
    CATFormatTBText "TitleBlock_Data_Tableau_8_" + CStr(cpt), catMiddleCenter, 2.5
    CATClassementTexte
  Next

End Sub

Public Function CATCompteNBLigne() As Integer
'Compte le nombre de lignes existantes de la nomenclature
Dim cpt As Integer
Dim rootName As String
Dim rootNameLength As Integer
Dim iNBTexts As Integer
Dim i As Long

  cpt = 0
  rootName = "TitleBlock_Text_Tableau_1_"
  rootNameLength = Len(rootName)
  iNBTexts = oTexts.Count
  For i = 1 To iNBTexts
    Set oText = oTexts.Item(i)
    If (Left(oText.Name, rootNameLength) = rootName) Then
      cpt = cpt + 1
    End If
  Next
  CATCompteNBLigne = cpt
  
End Function

Function CATCheckRef(Mode) 'As Integer
  '-------------------------------------------------------------------------------
  'Tester le type de format-cartouche présent
  '-------------------------------------------------------------------------------
  Dim leftText 'As String
  Dim i As Long
  Dim notFound As Integer
  Dim wholeName As String
  Dim refText As String
  
  i = 0
  notFound = 0
  iNBTexts = oTexts.Count
  
  While (notFound = 0 And i < iNBTexts)
    i = i + 1
    Set oText = oTexts.Item(i)
    wholeName = oText.Name
    leftText = Left(wholeName, 10)
    If (leftText = "Reference_") Then
      notFound = 1
      refText = "Reference_" + MacroID
      If (Mode = 1) Then
        MsgBox "cartouche du Bureau d'études outillages déjà créé !"
        CATCheckRef = 1
        Exit Function
      ElseIf (oText.Name <> refText) Then
        MsgBox "Un autre cartouche est utilisé." + Chr(10) + "utilisez " + Chr(34) + Right(wholeName, Len(wholeName) - 10) + Chr(34)
        CATCheckRef = 1
        Exit Function
      Else
        CATCheckRef = 0
        Exit Function
      End If
    End If
  Wend

  If (Mode = 1) Then
    CATCheckRef = 0
  Else
    MsgBox "Il n'y a pas de cartouche du Bureau d'études outillages !"
    CATCheckRef = 1
  End If

End Function

Sub CATFormatTBText(textName, anchorPosition, fontSize)
  '-------------------------------------------------------------------------------
  'Formatage de texte
  '-------------------------------------------------------------------------------
    oText.Name = textName
  oText.anchorPosition = anchorPosition
  oText.SetFontSize 0, 0, fontSize

End Sub

Sub CATFormatTBDTText(tailleFrame, justification)
  '-------------------------------------------------------------------------------
  'Formatage des textes dans les lignes de nomenclature
  '-------------------------------------------------------------------------------
  oText.WrappingWidth = tailleFrame
  oText.SetParameterOnSubString catAlignment, 0, 0, justification

End Sub

Sub CATClassementTexte()
  If Booltemoin Then
    iItem = iItem + 1
    Set oText1 = oTexts.Item(iItem)
    DictionnaireData.Add oText1.Name, iItem
  End If
    
End Sub
